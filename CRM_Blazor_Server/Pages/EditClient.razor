@page "/manage/clients/viewclient/{Id}/editclient"

@using CRM_Model_Library
@using CRM_Blazor_Server.ViewModels

@inject IClientData _db
@inject IContactData _db2
@inject IDataAccess _DataAccess
@inject NavigationManager NavigationManager
@if (Client != null)
{
    <h1>@Client.Name</h1>

}
else
{
    <p>Loading...</p>
}
<div style="float:right;font-size:125%">
    <h4>Add Contacts</h4>
    @if (Contacts == null)
    {
        <p>loading...</p>
    }
    else
    {

        @foreach (var contact in Cexcept)
        {
            <input type="checkbox" @onchange="eventArgs => { CheckBoxClicked(contact, eventArgs.Value); }" />@contact.GetInfo()<br />



        }
        <button type="button" class="btn btn-primary" @onclick="SubmitSelected">Submit</button>


    }
</div>
<div style="font-size:125%">

    @if (ContactsOfClient != null)
    {
        <h4>Delete Contacts:</h4>

        @foreach (var contact in ContactsOfClient)
        {

            <input type="checkbox" @onchange="eventArgs => { CheckBoxClickedDel(contact, eventArgs.Value); }" />@contact.GetInfo()<br />
        }

    }

    <a class="btn btn-primary" href="manage/clients/viewclient/@Id.ToString()" role="button">Back</a>
</div>
@code{
    [Parameter]
    public string Id { get; set; }
    private ClientModel Client;
    private List<ContactModel> ContactsOfClient;
    private List<ContactModel> Contacts;
    private List<ContactModel> AddSelected;
    private List<ContactModel> DelSelected;
    private List<ContactModel> Cexcept;
    protected override async Task OnInitializedAsync()
    {
        List<ClientModel> rep = await _db.GetClient(Int32.Parse(Id));

        Client = rep[0];
        ContactsOfClient = await _db.GetContactsOfClient(Client.ClientId);
        Contacts = await _db2.GetContacts();
        AddSelected = new List<ContactModel>();
        DelSelected = new List<ContactModel>();
        AssingCexcept();
    }
    protected List<ContactModel> AssingCexcept()
    {
        List<ContactModel> res = new List<ContactModel>();
        int i = 0;
        List<int> ids = new List<int>();
        ids = ContactsOfClient.Select(x => x.ContactId).ToList();
        while (i < Contacts.Count)
        {
            if (!(ids.Contains(Contacts[i].ContactId)))
            {
                res.Add(Contacts[i]);
            }
            i++;
        }
        Cexcept = res;
        return Cexcept;

    }
    public void CheckBoxClicked(ContactModel contact, object checkedvalue)
    {
        if ((bool)checkedvalue)
        {
            if (!AddSelected.Contains(contact))
            {
                AddSelected.Add(contact);
            }
        }
        else
        {
            if (AddSelected.Contains(contact))
            {
                AddSelected.Remove(contact);
            }
        }
    }
    public void CheckBoxClickedDel(ContactModel contact, object checkedvalue)
    {
        if ((bool)checkedvalue)
        {
            if (!DelSelected.Contains(contact))
            {
                DelSelected.Add(contact);
            }
        }
        else
        {
            if (DelSelected.Contains(contact))
            {
                DelSelected.Remove(contact);
            }
        }
    }
    public async Task SubmitSelected()
    {
        foreach (var contact in AddSelected)
        {
            await _db.InsertLink(Client.ClientId, contact.ContactId);
        }
        foreach (var contact in DelSelected)
        {
            await _db.DeleteLink(Client.ClientId, contact.ContactId);
        }
        AddSelected = new List<ContactModel>();
        DelSelected = new List<ContactModel>();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

}