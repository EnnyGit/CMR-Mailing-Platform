@page "/ClientsTest"

@using Microsoft.Extensions.Configuration
@*
    Injecting the IDataAccess service from Startup.cs
    Injecting IConfiguration from appsetings.json
*@
@inject IDataAccess _data 
@inject IConfiguration _config

<h3>ClientsTest</h3>

<button class="btn btn-primary" @onclick="InsertData">Insert</button>
<button class="btn btn-warning" @onclick="UpdateData">Update</button>
<button class="btn btn-danger" @onclick="DeleteData">Delete</button>

@if (clients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var c in clients)
    {
        <p>
            @c.Name
        </p>
    }
}

@code {        
    List<ClientModel> clients;

    private async Task InsertData()
    {
        string sql = "INSERT INTO client(Id, FirstName, LastName, Email) VALUES(@Id, @FirstName, @LastName, @Email);";

        await _data.SaveData(sql, new { Id = "6", FirstName = "Billy", LastName = "Bob", Email = "Billybob@gmail,com" }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task UpdateData()
    {
        string sql = "UPDATE client SET FirstName = @FirstName WHERE LastName = @LastName";

        await _data.SaveData(sql, new { FirstName = "Enny", LastName = "Adeoye"}, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task DeleteData()
    {
        string sql = "DELETE FROM client WHERE LastName = @LastName";

        await _data.SaveData(sql, new { LastName = "Bob" }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "SELECT * FROM client";

        clients = await _data.LoadData<ClientModel, dynamic>(sql, new { },  _config.GetConnectionString("default"));
    }
}
