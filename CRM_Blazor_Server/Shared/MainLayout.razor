@inherits LayoutComponentBase
@implements IDisposable
@inject LoginState loginState
@inject IUserData _db
@inject ProtectedSessionStorage ProtectedSessionStore

<div class="sidebar">
    @if (loginState.IsLoggedIn)
    {
        <NavMenu />
    }
</div>
<div class="main">
    <div class="content px-4">
        @if (loginState.IsLoggedIn.Equals(false) && register == false)
        {
            <h1 style="text-align:center">Login</h1>

            <div style="text-align:center">
                <label>Email </label>
                <input id="Email: " name="Email" type="text" @bind-value="email" />
            </div>
            <div style=" text-align:center">
                <label>Password </label>
                <input id="Password" name="Password" type="password" @bind-value="password" />
            </div>
            <div style="text-align:center">
                <button type="submit" @onclick=@HandleLogin>
                    Submit
                </button>
                <button type="submit" @onclick="@SwitchRegister">
                    Register
                </button>
            </div>

        }
        else if (register == true)
        {
            <h3>Register</h3>
            <EditForm Model="@newuser" OnValidSubmit="@InsertUser">

                <DataAnnotationsValidator />
                <ValidationSummary />
                <lable>First name:</lable>

                <InputText class="form-control" @bind-Value="newuser.FirstName"></InputText>

                <lable>Last name:</lable>

                <InputText class="form-control" @bind-Value="newuser.LastName"></InputText>


                <lable>Email address:</lable>

                <InputText class="form-control" @bind-Value="newuser.Email"></InputText>

                <lable>Password:</lable>

                <InputText type="password" class="form-control" @bind-Value="newuser.Password"></InputText>

                <button class="btn btn-success" type="submit" @onclick="InsertUser">Create User</button>
                <button class="btn btn-success" type="button" @onclick="SwitchRegister">Back</button>

            </EditForm>
        }
        else
        {
            @Body
        }
    </div>
</div>
}

@code {
    bool register = false;
    string email = "";
    string password = "";
    string message = "";
    static UserModel u;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        u = await ProtectedSessionStore.GetAsync<UserModel>("login");
        if(u != null)
        {
            loginState.SetLogin(true, u);
            await ProtectedSessionStore.SetAsync("login", u);
            message = "Login Succesful.";
        }
    }

    protected void SwitchRegister()
    {
        if (register)
        {
            register = false;
        }
        else
        {
            register = true;
        }
    }

    async Task HandleLogin()
    {


        List<UserModel> finduser = await _db.FindUser(email);
        if (finduser.Count == 1)
        {
            u = finduser[0];
            if (password.Equals(u.Password))
            {
                loginState.SetLogin(true, u);
                await ProtectedSessionStore.SetAsync("login", u);
                message = "Login Succesful.";
            }
            else
            {
                message = "Incorrect credentials.";
            }
        }
        else
        {
            message = "Something went wrong.";
        }


    }
    void HandleLogout()
    {
        email = "";
        password = "";
        loginState.SetLogin(false, null);
    }
    protected override void OnInitialized()
    {
        loginState.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        loginState.OnChange -= StateHasChanged;
    }

    //Register
    private List<UserModel> Users;
    protected override async Task OnInitializedAsync()
    {
        Users = await _db.GetUsers();
    }
    private DisplayUserModel newuser = new DisplayUserModel();
    private async Task InsertUser()
    {
        if (EmailCheck())
        {
            UserModel user = new UserModel
            {
                FirstName = newuser.FirstName,
                LastName = newuser.LastName,
                Email = newuser.Email,
                Password = newuser.Password
            };

            await _db.InsertUser(user);


            newuser = new DisplayUserModel();
            SwitchRegister();
        }
    }

    private bool EmailCheck()
    {
        foreach (var user in Users)
        {
            if (newuser.Email == user.Email)
            {

                return false;
            }

        }
        return true;
    }
}